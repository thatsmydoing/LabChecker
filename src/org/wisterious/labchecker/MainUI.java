/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainUI.java
 *
 * Created on 07 3, 10, 9:57:02 PM
 */

package org.wisterious.labchecker;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 *
 * @author thomas
 */
public class MainUI extends javax.swing.JFrame {
    File startingFolder;
    File inputFile;
    File outputFile;

    /** Creates new form MainUI */
    public MainUI() {
        startingFolder = null;
        inputFile = null;
        outputFile = null;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startingFolderTextField = new javax.swing.JTextField();
        browseStartingFolderButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        submissionsList = new javax.swing.JList();
        extractButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();
        browseInputFileButton = new javax.swing.JButton();
        browseOutputFileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        outputFileTextField = new javax.swing.JTextField();
        inputFileTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LabChecker");

        startingFolderTextField.setEditable(false);

        browseStartingFolderButton.setText("Browse");
        browseStartingFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseStartingFolderButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(submissionsList);

        extractButton.setText("Extract");
        extractButton.setEnabled(false);
        extractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractButtonActionPerformed(evt);
            }
        });

        checkButton.setText("Let's do some checking!");
        checkButton.setEnabled(false);
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        browseInputFileButton.setText("Browse");
        browseInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputFileButtonActionPerformed(evt);
            }
        });

        browseOutputFileButton.setText("Browse");
        browseOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputFileButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Input File");

        jLabel2.setText("Output File");

        outputFileTextField.setEditable(false);

        inputFileTextField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(startingFolderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseStartingFolderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extractButton))
                    .addComponent(checkButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(outputFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseOutputFileButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(browseInputFileButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startingFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extractButton)
                    .addComponent(browseStartingFolderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseInputFileButton)
                    .addComponent(jLabel1)
                    .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseOutputFileButton)
                    .addComponent(jLabel2)
                    .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseStartingFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseStartingFolderButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            startingFolderTextField.setText(file.getAbsolutePath());
            startingFolder = file;
            listAllInDir();
            extractButton.setEnabled(true);
        }
    }//GEN-LAST:event_browseStartingFolderButtonActionPerformed

    private void extractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractButtonActionPerformed
        Backend.extractAll(startingFolder, new File(startingFolder, "workingdir"));
        listAllInDir();
        extractButton.setEnabled(false);
    }//GEN-LAST:event_extractButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        JFrame f = new CheckerUI(Backend.getSubmissions(new File(startingFolder, "workingdir")), inputFile, outputFile);
        f.setVisible(true);
    }//GEN-LAST:event_checkButtonActionPerformed

    private void browseInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputFileButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            inputFile = fc.getSelectedFile();
            inputFileTextField.setText(inputFile.toString());
        }
        else {
            inputFile = null;
            inputFileTextField.setText("none");
        }
    }//GEN-LAST:event_browseInputFileButtonActionPerformed

    private void browseOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputFileButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            outputFile = fc.getSelectedFile();
            outputFileTextField.setText(outputFile.toString());
        }
        else {
            outputFile = null;
            outputFileTextField.setText("none");
        }
    }//GEN-LAST:event_browseOutputFileButtonActionPerformed

    private void listAllInDir() {
        if(startingFolder == null) return;
        File[] submissions = Backend.getSubmissions(new File(startingFolder, "workingdir"));
        
        if(submissions != null && submissions.length > 0) {
            submissionsList.setListData(submissions);
            checkButton.setEnabled(true);
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseInputFileButton;
    private javax.swing.JButton browseOutputFileButton;
    private javax.swing.JButton browseStartingFolderButton;
    private javax.swing.JButton checkButton;
    private javax.swing.JButton extractButton;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.JTextField startingFolderTextField;
    private javax.swing.JList submissionsList;
    // End of variables declaration//GEN-END:variables

}
